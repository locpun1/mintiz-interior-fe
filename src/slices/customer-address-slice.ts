// src/slices/customer-address-slice.ts

import { createSlice, PayloadAction } from '@reduxjs/toolkit';

import type { RootState } from '@/store'; // Import RootState type
import type { CustomerAddress } from '@/types/customer-types'; // Import the address type

// Define the state structure for this slice
interface CustomerAddressState {
  data: CustomerAddress[]; // The array of customer addresses
  loading: boolean; // Optional: Loading state specific to addresses
  error: string | null; // Optional: Error state specific to addresses
}

// Define the initial state
const initialState: CustomerAddressState = {
  data: [],
  loading: false,
  error: null,
};

const customerAddressSlice = createSlice({
  name: 'customerAddress', // The name used as a key in the root state
  initialState,
  reducers: {
    // Action to set the list of addresses
    setCustomerAddress(state, action: PayloadAction<CustomerAddress[]>) {
      state.data = action.payload;
      state.loading = false; // Reset loading/error when data is set
      state.error = null;
    },
    // Optional: Action to set loading state
    setAddressLoading(state, action: PayloadAction<boolean>) {
      state.loading = action.payload;
    },
    // Optional: Action to set error state
    setAddressError(state, action: PayloadAction<string | null>) {
      state.error = action.payload;
      state.loading = false; // Typically stop loading on error
    },
    // Optional: Action to clear addresses (used in cleanup)
    clearCustomerAddresses(state) {
      state.data = [];
      state.loading = false;
      state.error = null;
    }
  },
});

// Export the actions generated by createSlice
export const {
  setCustomerAddress,
  setAddressLoading,
  setAddressError,
  clearCustomerAddresses, // Export the clear action if you want to use it explicitly
} = customerAddressSlice.actions;

// --- Selectors ---

// Select the entire state of this slice
export const selectCustomerAddressState = (state: RootState): CustomerAddressState => state.customerAddress;

// Select only the array of addresses
export const selectCustomerAddressesData = (state: RootState): CustomerAddress[] => state.customerAddress.data;

// Select loading state (optional)
export const selectCustomerAddressLoading = (state: RootState): boolean => state.customerAddress.loading;

// Select error state (optional)
export const selectCustomerAddressError = (state: RootState): string | null => state.customerAddress.error;


// Export the reducer as the default export
export default customerAddressSlice.reducer;